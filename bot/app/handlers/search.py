import logging
import requests
from telegram import Update
from telegram.ext import CallbackContext
from app.config import ALL_BOOKS_URL

logger = logging.getLogger(__name__)

def search_books(update: Update, context: CallbackContext) -> None:
    query = update.message.text.lower()

    try:
        response = requests.get(ALL_BOOKS_URL)
        response.raise_for_status()
        books = response.json()

        results = []
        for book in books:
            if query in book["title"].lower():
                results.append(
                    f"üìñ <b>{book['title']}</b>\n"
                    f"üë§ –ê–≤—Ç–æ—Ä: {book['author']}\n"
                    f"üìö –ñ–∞–Ω—Ä: {book['genre']}\n"
                    f"üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {book['publication_date']}\n"
                    f"üåê –Ø–∑—ã–∫: {book['language']}\n"
                    f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: {book['page_count']}\n"
                    f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {book['rating']}\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {book['file_url']}\n"
                )

        if results:
            update.message.reply_text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n" + "\n".join(results), parse_mode="HTML")
        else:
            update.message.reply_text("–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ API: {e}")
        update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
